namespace = aot_phanon_events
country_event = {
	id = aot_phanon_events.1
	title = "aot_phanon_events.1.name"
	desc = "aot_phanon_events.1.desc"
	picture = GFX_evt_dimensional_mirror
	show_sound = event_phanon_discovery
	trigger = {
		has_technology = tech_stellarite_generator_lvl3
		NOR = {
			has_country_flag = offer_phanon_dimensional_mirror_chain
			has_country_flag = block_phanon_dimensional_mirror_chain
			has_country_flag = finished_phanon_dimensional_mirror_chain
			has_event_chain = phanon_dimensional_mirror_chain
			has_country_flag = attacked_phanon_property
		}
	}
	mean_time_to_happen = {
		years = 20
	}
	option = {
		allow = {
			NOT = {
				has_event_chain = phanon_dimensional_mirror_chain
			}
		}
		name = aot_phanon_events.1.a
		custom_tooltip = aot_phanon_events.1.a_desc
		set_country_flag = offer_phanon_dimensional_mirror_chain
		default_hide_option = yes
		trigger = {
			is_ai = no
		}
		hidden_effect = {
			begin_event_chain = {
				event_chain = phanon_dimensional_mirror_chain
			}
			capital_scope = {
				save_event_target_as = pc_home
			}
			enable_special_project = {
				name = "RESEARCH_PHANON_DIMENSIONAL_MIRROR"
				location = event_target:pc_home
				owner = root
			}
		}
		ai_chance = {
			factor = 0
		}
	}
	option = {
		name = aot_phanon_dimensional_mirror_postpone
		custom_tooltip = aot_phanon_dimensional_mirror_postpone_desc
		trigger = {
			is_ai = no
		}
		set_timed_country_flag = {
			flag = block_phanon_dimensional_mirror_chain
			days = 1800
		}
		ai_chance = {
			factor = 0
		}
	}
	option = {
		name = aot_dm_production_core_skip
		custom_tooltip = aot_dm_production_core_skip_desc
		trigger = {
			is_ai = no
		}
		set_country_flag = block_phanon_dimensional_mirror_chain
		ai_chance = {
			factor = 0
		}
	}
	# The AI is too dumb for this, so give the option right away but without any progress.
	option = {
		name = aot_phanon_events.1.a
		custom_tooltip = aot_phanon_events.1.a_desc
		trigger = {
			is_ai = yes
		}
		random_list = {
			90 = {
			}
			10 = {
				hidden_effect = {
					add_research_option = tech_dm_production_core
				}
			}
		}
		ai_chance = {
			factor = 1000
		}
	}
}

# SUCCESSS, MIRROR MIRROR IN ZE SPACE!
country_event = {
	id = aot_phanon_events.2
	title = aot_phanon_events.2.name
	desc = aot_phanon_events.2.desc
	picture = GFX_evt_dimensional_mirror
	show_sound = event_celebration
	is_triggered_only = yes
	trigger = {
	}
	immediate = {
		end_event_chain = phanon_dimensional_mirror_chain
		set_country_flag = finished_phanon_dimensional_mirror_chain
	}
	### PHANONTASTIC MIRROR
	option = {
		name = aot_phanon_events.2.a
		add_research_option = tech_phanon_dimensional_mirror
		add_tech_progress = {
			tech = tech_phanon_dimensional_mirror
			progress = 0.1
		}
	}
}

# MIRROR BUILD BUT NEEDS ACTIVATION
country_event = {
	id = aot_phanon_events.3
	title = aot_phanon_events.3.name
	desc = aot_phanon_events.3.desc
	picture = GFX_evt_dimensional_mirror
	show_sound = event_celebration
	is_triggered_only = yes
	trigger = {
		NOR = {
			has_country_flag = defeated_wave_1
			has_country_flag = defeated_wave_2
			has_country_flag = defeated_wave_3
			has_country_flag = defeated_wave_4
		}
	}
	immediate = {
		if = {
			limit = {
				NOT = {
					has_country_flag = completed_dimensional_mirror
				}
			}
			set_country_flag = completed_dimensional_mirror
		}
	}
}

# MIRROR IS FULLY OPERATIONAL
country_event = {
	id = aot_phanon_events.4
	title = aot_phanon_events.4.name
	desc = {
		trigger = {
			root = {
				has_country_flag = defeated_wave_1
				NOT = {
					has_country_flag = defeated_wave_2
				}
			}
		}
		text = aot_phanon_events.4.wave1.desc
	}
	desc = {
		trigger = {
			root = {
				has_country_flag = defeated_wave_1
				has_country_flag = defeated_wave_2
				NOT = {
					has_country_flag = defeated_wave_3
				}
			}
		}
		text = aot_phanon_events.4.wave2.desc
	}
	desc = {
		trigger = {
			root = {
				has_country_flag = defeated_wave_1
				has_country_flag = defeated_wave_2
				has_country_flag = defeated_wave_3
				NOT = {
					has_country_flag = defeated_wave_4
				}
			}
		}
		text = aot_phanon_events.4.wave3.desc
	}
	desc = {
		trigger = {
			root = {
				has_country_flag = defeated_wave_1
				has_country_flag = defeated_wave_2
				has_country_flag = defeated_wave_3
				has_country_flag = defeated_wave_4
			}
		}
		text = aot_phanon_events.4.wave4.desc
	}
	picture = GFX_evt_dimensional_mirror
	show_sound = event_power_dm
	is_triggered_only = yes
	trigger = {
	}
	immediate = {
	}
	option = {
		name = aot_phanon_events.4.a
		hidden_effect = {
			country_event = {
				id = aot_phanon_events.7
				days = 5
				random = 3
			}
		}
	}
}

# GATE GETS POWERED DOWN
country_event = {
	id = aot_phanon_events.5
	is_triggered_only = yes
	hide_window = yes
	trigger = {
	}
	immediate = {
		every_megastructure = {
			limit = {
				is_megastructure_type = dimensional_mirror_final
			}
			solar_system = {
				spawn_megastructure = {
					type = dimensional_mirror_0
					owner = root
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
	}
}

# FAKE MEME MESSAGE SUCCEEDED, SENDING NEW PHANON VAULT.
country_event = {
	id = aot_phanon_events.6
	hide_window = yes
	is_triggered_only = yes
	trigger = {
	}
	immediate = {
		#Spawn the vault plus some Phanon bois to defend.
		event_target:dimensional_mirror_obj = {
			create_phanon_protecc_wave_1 = yes
			create_phanon_protecc_wave_2 = yes
			create_phanon_protecc_wave_3 = yes
			create_phanon_protecc_wave_4 = yes
			move_protecc_fleet_to_system_star = yes
			solar_system = {
				spawn_planet = {
					name = "V-N1C3V"
					class = pc_acot_pmc_vault
					orbit_distance = 25
					size = 3
					orbit_angle = 20
					init_effect = {
						save_global_event_target_as = aot_bootleg_phanon_vault
						set_owner = event_target:phanon_protecc_base_country
						set_controller = event_target:phanon_protecc_base_country
						add_district = district_acot_phanon_command
						add_district = district_acot_phanon_data
						add_district = district_acot_phanon_vault
						add_building = building_phanon_tower
						add_building = building_phanon_lab
						add_building = building_phanon_vault
						add_building = building_phanon_vault
						add_building = building_phanon_plant
						add_building = building_phanon_plant
						add_building = building_phanon_plant
						while = {
							count = 5
							create_pop = {
								species = event_target:phanon_species
							}
						}
						create_fleet = {
							effect = {
								set_owner = event_target:phanon_protecc_base_country
								create_ship = {
									name = random
									design = "NAME_ACOT_STAR_OVERWATCH"
									graphical_culture = "acot_pmc"
								}
								set_location = {
									target = prev
									distance = 20
									angle = 20
								}
							}
							settings = {
								is_boss = no
								garrison = yes
							}
						}
					}
				}
			}
			spawn_habitat_cracker_effect = yes
			remove_megastructure = this
		}
	}
}

# SENDING MESSAGE TO EMEZON
country_event = {
	id = aot_phanon_events.7
	title = aot_phanon_events.7.diplo_title
	desc = aot_phanon_events.7.diplo.desc
	trigger = {
	}
	is_triggered_only = yes
	diplomatic = yes
	show_sound = event_ai_started
	picture_event_data = {
		room = acot_phanon_bridge_hostile_room
	}
	immediate = {
	}
	after = {
	}
	option = {
		trigger = {
			NOT = {
				has_country_flag = defeated_wave_1
			}
		}
		name = aot_phanon_events.7.a
		response_text = aot_phanon_events.7.a.response
		default_hide_option = yes
		hidden_effect = {
			country_event = {
				id = aot_phanon_events.8
				days = 10
				random = 5
			}
		}
	}
	option = {
		trigger = {
			has_country_flag = defeated_wave_1
			NOT = {
				has_country_flag = defeated_wave_2
			}
		}
		name = aot_phanon_events.7.b
		response_text = aot_phanon_events.7.b.response
		default_hide_option = yes
		hidden_effect = {
			country_event = {
				id = aot_phanon_events.8
				days = 10
				random = 5
			}
		}
	}
	option = {
		trigger = {
			has_country_flag = defeated_wave_1
			has_country_flag = defeated_wave_2
			NOT = {
				has_country_flag = defeated_wave_3
			}
		}
		name = aot_phanon_events.7.b
		response_text = aot_phanon_events.7.c.response
		default_hide_option = yes
		hidden_effect = {
			country_event = {
				id = aot_phanon_events.8
				days = 10
				random = 5
			}
		}
	}
	option = {
		trigger = {
			has_country_flag = defeated_wave_1
			has_country_flag = defeated_wave_2
			has_country_flag = defeated_wave_3
			NOT = {
				has_country_flag = defeated_wave_4
			}
		}
		name = aot_phanon_events.7.b
		response_text = aot_phanon_events.7.d.response
		default_hide_option = yes
		hidden_effect = {
			country_event = {
				id = aot_phanon_events.8
				days = 10
				random = 5
			}
		}
	}
}

# SPAWN ATTACKING P.R.O.T.E.C.C. FLEETS
country_event = {
	id = aot_phanon_events.8
	title = aot_phanon_events.8.name
	desc = {
		trigger = {
			root = {
				has_country_flag = defeated_wave_1
				NOT = {
					has_country_flag = defeated_wave_2
				}
			}
		}
		text = aot_phanon_events.8.wave1.desc
	}
	desc = {
		trigger = {
			root = {
				has_country_flag = defeated_wave_1
				has_country_flag = defeated_wave_2
				NOT = {
					has_country_flag = defeated_wave_3
				}
			}
		}
		text = aot_phanon_events.8.wave2.desc
	}
	desc = {
		trigger = {
			root = {
				has_country_flag = defeated_wave_1
				has_country_flag = defeated_wave_2
				has_country_flag = defeated_wave_3
				NOT = {
					has_country_flag = defeated_wave_4
				}
			}
		}
		text = aot_phanon_events.8.wave3.desc
	}
	desc = {
		trigger = {
			root = {
				has_country_flag = defeated_wave_1
				has_country_flag = defeated_wave_2
				has_country_flag = defeated_wave_3
				has_country_flag = defeated_wave_4
			}
		}
		text = aot_phanon_events.8.wave4.desc
	}
	picture = GFX_evt_dimensional_mirror
	show_sound = event_phanon_vault_summon
	is_triggered_only = yes
	trigger = {
	}
	immediate = {
		create_protecc_country = yes
		# SPAWN ENEMIES AT THE GATES
		switch = {
			trigger = has_country_flag
			defeated_wave_3 = {
				set_country_flag = defeated_wave_4
				country_event = {
					id = aot_phanon_events.6
				}
			}
			defeated_wave_2 = {
				event_target:dimensional_mirror_obj = {
					create_phanon_protecc_wave_1 = yes
					create_phanon_protecc_wave_2 = yes
					create_phanon_protecc_wave_3 = yes
					move_protecc_fleet_to_system_star = yes
				}
				set_country_flag = defeated_wave_3
				country_event = {
					id = aot_phanon_events.5
				}
			}
			defeated_wave_1 = {
				event_target:dimensional_mirror_obj = {
					create_phanon_protecc_wave_1 = yes
					create_phanon_protecc_wave_2 = yes
					move_protecc_fleet_to_system_star = yes
				}
				set_country_flag = defeated_wave_2
				country_event = {
					id = aot_phanon_events.5
				}
			}
			default = {
				event_target:dimensional_mirror_obj = {
					create_phanon_protecc_wave_1 = yes
					move_protecc_fleet_to_system_star = yes
				}
				set_country_flag = defeated_wave_1
				country_event = {
					id = aot_phanon_events.5
				}
			}
		}
	}
}

# Spawn destroyed megaturrets
country_event = {
	id = aot_phanon_events.9
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		fromfrom = {
			is_ship_size = phanon_megaturret
		}
	}
	immediate = {
		fromfrom = {
			save_event_target_as = destroyed_megaturret
			spawn_habitat_cracker_effect = yes
			solar_system = {
				spawn_megastructure = {
					type = phanon_megaturret_destroyed_0
					owner = from
					coords_from = event_target:destroyed_megaturret
					orbit_angle = 180
				}
			}
		}
	}
}

##########################
# Megastructure Events
##########################
# Initial Ring World Built
country_event = {
	id = aot_phanon_events.1000
	title = "aot_phanon_events.1000.name"
	desc = "aot_phanon_events.1000.desc"
	picture = GFX_evt_unknown_ships
	show_sound = event_ringworld_build_start
	location = FROMFROM
	is_triggered_only = yes
	trigger = {
		FROM = {
			is_megastructure_type = star_imploder_0
		}
	}
	option = {
		name = "aot_phanon_events.1000.a"
	}
}

# Building Star Imploder Notification (HIDDEN)
country_event = {
	id = aot_phanon_events.1001
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		FROM = {
			is_megastructure_type = star_imploder_1
		}
	}
	immediate = {
		FROMFROM = {
			save_event_target_as = star_imploder_system
		}
		every_country = {
			limit = {
				is_ai = no
				NOT = {
					is_same_value = ROOT
				}
				OR = {
					has_intel_level = {
						who = root
						category = economy
						level >= 1
					}
					has_intel_level = {
						who = root
						category = technology
						level >= 1
					}
				}
			}
			country_event = {
				id = aot_phanon_events.1002
			}
		}
	}
	after = {
		if = {
			limit = {
				NOT = {
					has_country_flag = started_first_stellar_imploder
				}
			}
			set_country_flag = started_first_stellar_imploder
		}
		else_if = {
			limit = {
				has_country_flag = started_first_stellar_imploder
			}
			set_country_flag = started_first_stellar_imploder_2
		}
	}
}

# Building Star Imploder Notification
country_event = {
	id = aot_phanon_events.1002
	title = "aot_phanon_events.1002.name"
	desc = {
		text = aot_phanon_events.1002.desc.a
		trigger = {
			FROM = {
				has_country_flag = started_first_stellar_imploder
				NOT = {
					has_country_flag = started_first_stellar_imploder_2
				}
			}
		}
	}
	desc = {
		text = aot_phanon_events.1002.desc.b
		trigger = {
			FROM = {
				has_country_flag = started_first_stellar_imploder_2
			}
		}
	}
	picture = GFX_evt_stellar_imploder_construction
	show_sound = event_mega_structure_other_empire_build_start
	location = event_target:star_imploder_system
	is_triggered_only = yes
	option = {
		# has built own Star Imploder
		trigger = {
			OR = {
				any_owned_megastructure = {
					OR = {
						is_megastructure_type = star_imploder_1
						is_megastructure_type = star_imploder_2
						is_megastructure_type = star_imploder_3
					}
				}
				has_country_flag = finished_stellar_imploder
			}
		}
		name = "aot_phanon_events.1002.a"
	}
	option = {
		# has no Star Imploder
		trigger = {
			NOT = {
				any_owned_megastructure = {
					OR = {
						is_megastructure_type = star_imploder_1
						is_megastructure_type = star_imploder_2
						is_megastructure_type = star_imploder_3
					}
				}
			}
			NOT = {
				has_country_flag = finished_stellar_imploder
			}
		}
		name = "aot_phanon_events.1002.b"
	}
}

# Star Imploder Built
country_event = {
	id = aot_phanon_events.1003
	title = "aot_phanon_events.1003.name"
	picture = GFX_evt_stellar_imploder_construction
	show_sound = event_dyson_sphere_build_complete
	location = FROMFROM
	is_triggered_only = yes
	desc = {
		trigger = {
			FROM = {
				is_megastructure_type = star_imploder_1
			}
		}
		text = aot_phanon_events.1003.a.desc
	}
	desc = {
		trigger = {
			FROM = {
				is_megastructure_type = star_imploder_2
			}
		}
		text = aot_phanon_events.1003.b.desc
	}
	trigger = {
		FROM = {
			OR = {
				is_megastructure_type = star_imploder_1
				is_megastructure_type = star_imploder_2
			}
		}
	}
	option = {
		name = "aot_phanon_events.1003.a"
	}
}

# Star Imploder Completed
country_event = {
	id = aot_phanon_events.1004
	title = "aot_phanon_events.1004.name"
	desc = {
		text = aot_phanon_events.1004.desc.a
		trigger = {
			NOT = {
				has_country_flag = finished_stellar_imploder
			}
		}
	}
	desc = {
		text = aot_phanon_events.1004.desc.b
		trigger = {
			has_country_flag = finished_stellar_imploder
		}
	}
	picture = GFX_evt_phanon_pylon_supernova
	show_sound = event_ringworld_build_complete
	location = FROMFROM
	is_triggered_only = yes
	trigger = {
		FROM = {
			is_megastructure_type = star_imploder_3
		}
		FROMFROM = {
			NOT = {
				any_system_megastructure = {
					is_megastructure_type = star_imploder_2
				}
			}
		}
	}
	immediate = {
		set_country_flag = finished_stellar_imploder
		FROMFROM = {
			save_event_target_as = completed_star_imploder_system
		}
		every_country = {
			limit = {
				is_ai = no
				NOT = {
					is_same_value = ROOT
				}
				OR = {
					has_intel_level = {
						who = root
						category = economy
						level >= 1
					}
					has_intel_level = {
						who = root
						category = technology
						level >= 1
					}
				}
			}
			hidden_effect = {
				country_event = {
					id = aot_phanon_events.1005
				}
			}
		}
	}
	after = {
		hidden_effect = {
			country_event = {
				id = utopia.2006
				days = 5
			}
		}
	}
	option = {
		name = "aot_phanon_events.1004.a"
	}
}

# Star Imploder Completed (Others)
country_event = {
	id = aot_phanon_events.1005
	title = "aot_phanon_events.1005.name"
	desc = {
		text = aot_phanon_events.1005.desc.a
		trigger = {
			NOT = {
				FROM = {
					has_country_flag = finished_stellar_imploder
				}
			}
		}
	}
	desc = {
		text = aot_phanon_events.1005.desc.b
		trigger = {
			FROM = {
				has_country_flag = finished_stellar_imploder
			}
		}
	}
	picture = GFX_evt_phanon_pylon_supernova
	show_sound = event_mega_structure_other_empire_build_complete
	location = event_target:completed_star_imploder_system
	is_triggered_only = yes
	option = {
		# has built own Star Imploder
		trigger = {
			OR = {
				any_owned_megastructure = {
					OR = {
						is_megastructure_type = star_imploder_1
						is_megastructure_type = star_imploder_2
						is_megastructure_type = star_imploder_3
					}
				}
				has_country_flag = finished_stellar_imploder
			}
		}
		name = "aot_phanon_events.1005.a"
	}
	option = {
		# has no Star Imploder
		trigger = {
			any_owned_megastructure = {
				NOT = {
					OR = {
						is_megastructure_type = star_imploder_1
						is_megastructure_type = star_imploder_2
						is_megastructure_type = star_imploder_3
					}
				}
			}
			NOT = {
				has_country_flag = finished_stellar_imploder
			}
		}
		name = "aot_phanon_events.1005.b"
	}
}
